DOM - Document Object Model

- The DOM (or Document Object Model) is a tree-like representation of the conecnts of a webpage - a tree of "nodes" with different relationships depending on how they're arranged.
    in the HTML document.

<div id="container">
  <div class="display"></div>
  <div class="controls"></div>
</div>

- In the above example, the <div class="display"></div> is a "child" of <div id="container"></div> and a sibling to <div class="controls"></div>.
    Think of it like a family tree. <div id="container"></div> is a parent, with it's children on the next leve, each on their own "branch".

Targeting Nodes with Selectors

- When working wiht the DOM, you use "selectors" to target the nodes you want to work with. You can use a combination of CSS-style selectors and relationship properties to target the nodes you want. 
- In the above example, you could use the following selectors to refer to <div class="display"></div>:
    * div.display
    * .display
    * #container > .display
    * div#container > div.display
You can also use relational selectors (i.e. firstElementChild or lastElementChild etc.) with special properties owned by the nodes. 

const container = document.querySelector('#container');
// selects the #container div (don't worry about the syntax, we'll get there)

console.dir(container.firstElementChild);                      
// selects the first child of #container => .display

const controls = document.querySelector('.controls');   
// selects the .controls div

console.dir(controls.previousElementSibling);                  
// selects the prior sibling => .display